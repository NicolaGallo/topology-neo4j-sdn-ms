openapi: 3.0.3
info:
  title: Topology Neo4j SDN Microservice API
  description: API for managing nodes and relationships in a Neo4j graph database
  version: 1.0.0
  contact:
    name: MITO Development Team
servers:
  - url: 'http://localhost:8080'
    description: Local development server
tags:
  - name: Nodes
    description: Node management APIs
  - name: Relationships
    description: Relationship management APIs
paths:
  /api/nodes:
    post:
      tags:
        - Nodes
      summary: Create a new node
      description: Creates a new node with dynamic labels based on the type
      operationId: createNode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeRequest'
      responses:
        '201':
          description: Node created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDto'
        '400':
          description: Invalid request parameters
    get:
      tags:
        - Nodes
      summary: Get all nodes
      description: Retrieves all nodes from the database
      operationId: getAllNodes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NodeDto'
  /api/nodes/{id}:
    get:
      tags:
        - Nodes
      summary: Get a node by ID
      description: Retrieves a node by its ID
      operationId: getNodeById
      parameters:
        - name: id
          in: path
          description: ID of the node
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDto'
        '404':
          description: Node not found
    put:
      tags:
        - Nodes
      summary: Update a node
      description: Updates an existing node with dynamic labels based on the type
      operationId: updateNode
      parameters:
        - name: id
          in: path
          description: ID of the node
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NodeRequest'
      responses:
        '200':
          description: Node updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDto'
        '400':
          description: Invalid request parameters
        '404':
          description: Node not found
    delete:
      tags:
        - Nodes
      summary: Delete a node
      description: Deletes a node by its ID
      operationId: deleteNode
      parameters:
        - name: id
          in: path
          description: ID of the node
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Node deleted successfully
        '404':
          description: Node not found
  /api/relationships:
    post:
      tags:
        - Relationships
      summary: Create a new relationship
      description: Creates a new relationship between two nodes
      operationId: createRelationship
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipRequest'
      responses:
        '201':
          description: Relationship created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipDto'
        '400':
          description: Invalid request parameters
    get:
      tags:
        - Relationships
      summary: Get all relationships
      description: Retrieves all relationships from the database
      operationId: getAllRelationships
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelationshipDto'
  /api/relationships/{id}:
    get:
      tags:
        - Relationships
      summary: Get a relationship by ID
      description: Retrieves a relationship by its ID
      operationId: getRelationshipById
      parameters:
        - name: id
          in: path
          description: ID of the relationship
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipDto'
        '404':
          description: Relationship not found
    put:
      tags:
        - Relationships
      summary: Update a relationship
      description: Updates an existing relationship
      operationId: updateRelationship
      parameters:
        - name: id
          in: path
          description: ID of the relationship
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelationshipRequest'
      responses:
        '200':
          description: Relationship updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelationshipDto'
        '400':
          description: Invalid request parameters
        '404':
          description: Relationship not found
    delete:
      tags:
        - Relationships
      summary: Delete a relationship
      description: Deletes a relationship by its ID
      operationId: deleteRelationship
      parameters:
        - name: id
          in: path
          description: ID of the relationship
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Relationship deleted successfully
        '404':
          description: Relationship not found
components:
  schemas:
    NodeDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        properties:
          type: object
          additionalProperties: true
    NodeRequest:
      type: object
      required:
        - type
        - properties
      properties:
        type:
          type: string
          description: Type string that will be split into labels (e.g. "ITEM:NETWORK_ELEMENT:SWRT")
        properties:
          type: object
          additionalProperties: true
          description: Node properties as key-value pairs
    RelationshipDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
        sourceNodeId:
          type: integer
          format: int64
        targetNodeId:
          type: integer
          format: int64
    RelationshipRequest:
      type: object
      required:
        - type
        - sourceNodeId
        - targetNodeId
      properties:
        type:
          type: string
          description: Type of the relationship
        sourceNodeId:
          type: integer
          format: int64
          description: ID of the source node
        targetNodeId:
          type: integer
          format: int64
          description: ID of the target node